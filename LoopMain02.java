package kr.ac.kopo.day03;

/*
 * for와 while문의 경우 항상 조건문 먼저 실행되기 때문에 조건이 만족하지 않는 경우 단 1회도 블록안의 코드가 실행되지 않는
 * 경우가 생길 수 있다. 그러나,
 * for문과 while문의 조건이 무엇인지에 상관없이 최소 for문과 while문의 블록이 1회이상 수행되게 하고 싶을 때,
 * do while 문을 사용하게 된다.
 * 
 * do while문에서 최초로 실행되는 시작점의 코드를 알려주기 위해 do를 사용하게된다.
 * 
 * 
 * 초기화 변수
 * do {
 * 		statement;
 * 		incre/decre;
 * }while(조건문);
 * 
 * 
 * 위에서 조건문은 결과적으로 블록안의 코드를 "2번째 실행해도 돼?"라는 조건을 확인하게 되는 것이다. 왜냐면 블록안의 코드가
 * 무조건 1회는 실행되기 때문이다. 
 * 
 * for문은 do와 결합하기 어려운 이유는 for문의 조건에는 초기와 변수와 증감 변수까지 있기 때문에 조건만 따로 분기하기 어려워
 * 동작이 어렵기 때문이다.
 * 
 * 실무에서 do while문을 사용할 때엔 보통 에러를 체크하기 위해 사용한다.
 * 
 * 
 */

public class LoopMain02 {
	
	public static void main(String[] args) {
		
		int cnt = 1;
		// 초기화변수
		do {
			
			System.out.println("Hello");
			cnt++;
			// 무조건 1회는 실행되는 블록안의 코드
			// 증감조건
		} while(cnt <= 5);
		
		// do while 문에서 실제로 실행되는 블록은 while문의 위에 존재한다. while문은 블록이 while의 아래에 존재한다.
		
		
		cnt = 1;
		
		while(true) {
			
			System.out.println("Hello");
			
			++cnt;
			
			if(cnt > 5) {
				
				break;
			}
			
		}
		
		// break는 가장 가까운 반복문이나 switch문을 빠져나오는 기능을한다. 그러므로 위경우엔 가장 가까운 반복문이 while
		// 이므로, break를 만나는 순간 while문의 블록을 빠져나오게 된다. 그런데, 일반적으로 break문을 만나면 가장 가까운
		// 반복문이나 스위치문을 한번 빠져 나가지만, 자바에서는 break문을 사용하여 내가 원하는 블록을 반복문이 중첩된 상태에서도 
		// 한번에 빠져나가게 할 수 있다.
		// break문은 if문과는 아무른 관련이 없다.
		
		// continue는 if 문에 사용할 수 있지만, 본질적인 관계가 있는 코드는 for과 while같은 반복문과 연관이있다.
		// 즉, continue는 for과 while이 존재하지 않는 상황에서 사용하면 에러가 발생하고,
		// 마찬가지로, break또한 for과 while이 존재하지 않는 상황에서 사용하면 에러가 발생한다.
		// 또한, continue는 가장 가까운 반복문의 조건의 처음으로 돌아가는 것이다. 중첩된 상황에서도 가장 가까운 반복문의 조건으로
		// 돌아가게된다.
		
		// break와 달리 continue는 반복문이 반복해야하는 전체 횟수를 무조건다 돌긴 도는데, 실행되지 않는 블록이 존재하는 것이다.
		// break는 애초에 반복자체가 안되게 한다.
		
		
		// while문은 내가 몇번을 반복해야하는지에 대해 모르지만 끝지점과 처음지점을 알때사용하고, for문은 반복하는 횟수를 아는
		// 경우에 사용한다. 이러한 개념과 비슷하게 배열은 원소의 개수가 정해져 있으므로, for문과 함께 사용한다.

	}
	
}


