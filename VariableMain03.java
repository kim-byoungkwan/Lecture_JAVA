package kr.ac.kopo.day01;

public class VariableMain03 {
	
	public static void main(String[] args) {
		
		int a;
		byte b = 10;
		
		a = b;
		// = 을 대입 연산자라고 한다. 무조건 오른쪽의 값이 대입 연산자에의에 왼쪽에 대입되는 것이다.
		// 이때, 오른쪽 b와 왼쪽 a의 자료형은 기본적으로 서로 같아야 대입연산자를 사용할 수 있다.
		// 항상 어떤 연산자를 사용하더라도 그 연산자를 기준으로 왼쪽과 오른쪽의 자료형이 같아야하는 것이 기본이다.
		// 그러나 연산자를 기준으로 왼쪽과 오른쪽의 값의 자료형이 서로 다른경우가 존재할수있는데, 이때 형변환이 발생한다고한다.
		// 형변환은 기본자료형에서의 형변환과 참조자료형에서의 형변환이 존재한다.
		// 형변환의 종류는 명시적(강제적)형변환과 묵시적 형변환이 있다.
		// 500cc의 잔에 200cc의 물을 넣는 경우는 자연스럽게 문제가 안된다. 이러한 경우를 묵시적(자연스럽게)으로 일어나는
		// 묵시적 형변환이라고 한다.
		// 이와 반대로 500cc잔에 1000cc 잔의 물을 넣는 경우 강제적으로 해야된다. 이러한 경우를 명시적(강제적)형변환이라고한다.
		// 즉, 명시적 형변환과 묵시적 형변환은 왼쪽 오른쪽 자료형의 크기에 의해 결정되는 개념이다.
		
		// 이경우 a는 인트현, b는 바이트형이므로 대입연산자가 작용할 수 있는 본질에 맞지 않는다. 그러나, 이경우 int자료혀으이
		// 크기가 byte 자료형의 크기보다 크다. 이경우 묵시적 형변환이 일어난다. 즉,대입 연산자의 좌우 자료형은 같아야하므로
		// int a = (int)b 처럼 byte 자료형 b를 대입연산자를 사용하기 위해 일시적으로 int형처럼 보고 대입을 하고자
		// 하겠다는 것이다.
		
//		b = a;
		
		// 이경우는 a는 인트형이므로 b보다 더 큰 크기의 자료형이다. 실제로 1000cc잔에 100cc만 들어있을 수 있지만,
		// 800cc가 들어있을 경우 문제가 될수있다. 마찬가지로, 크기가 큰 a를 b에 넣고자할 때 문제가 발생하지 않을 수 있지만,
		// 문제가 될 경우도 있다.따라서 이와같은 형변환은 강제로 해주어야 하므로,
		
		b = (byte)a;
		// 반드시 위와같이 int 자료형보다 더 작은 자료형 byte를 명확하게 정의해줘야 한다.
		
		System.out.println(10 + 20);
		
		System.out.println(10 + 20.0);
		// 이경우는 결과값이 20.0을 따라가므로 인트형 10이 플롯형 20.0으로 묵시적으로 형변환이 일어난것이다.
		
		System.out.println(10 + (int)20.0);
		// 만약 더큰 크기의 플롯형이 아닌 인트형으로 표현하고자 한다면 위와 같이 플롯을 int 형 자료형 더 작은 자료형으로
		// 명시적으로 형변환을 해주면 그 결과값은 더 작은 자료형인 int형으로 표현되게 된다.
		
		double d = 10 + 20.2;
		// 이경우는 자동으로 실수형으로 표현되므로 10이 더블형으로 자현스럽게 형변환이 일어난 것이다 즉 묵시적 형변환
		
//		int e = 10 + 20.2;
		// 이경우는 오른쪽은 자동으로 큰 자료형을 따라가므로, 묵시적 형변환에의해 실수형 30.2로 연산되게 되는데,
		// 이경우 우측항이 결과적으로 실수형 왼쪽은 정수형이므로 명시적 형변환이 일어나야 하므로 (int) 자료형이 없으면,
		// 오류가 발생하게 된다. 반드시 있어야한다.

		int e = (int)(10 + 20.2);
				
		// 이와 같이 명시적 으로 표현해야한다.
		
		final int NUM = 100;
		
//		NUM = 20; 이과같이 변경불가하다.
		
		// final이라는 선언은 변수앞에 붙을수도있고, 클래스앞에 붙을수도있다.
		// 또한, final 변수는 NUM과같이 대문자로 표현해줘야한다. 약속! 대문자로 표현된 것은 final 붙어있음을
		// 자바에서 알아야한다.
		
		char ch = '!';
		
		ch = '\'';
		
		// 역슬래쉬 앞에 작은따옴표는 문자료 작은따옴표를 표현하고자 하는 것이다.
		
		ch = '\n';
		
		ch = '\\';
				
		// 자바에서 역슬러쉬 \는 무조건 다음에 나오는 것을 문자화 시키는 역할을 한다. 따라서 진짜로 역슬러쉬를 표현하려면
		// 위와같이 역슬러쉬앞에 역슬러쉬를 한번더 써줘야한다.
		
		String path = "D:\\Lecture\\java-workspace\\JAVA\\src\\kr\\ac\\kopo\\day01";
		// 위의 경우 실제 주소엔 역슬러쉬가 한개만 존재하는데 자바에서는 역슬러쉬의 기능에의해 역슬러쉬를 보여주기위해
		// 역슬러쉬를 2개 표현하게 된다.
		
		String str = "\"ab\"";
		
		System.out.println(str);
		
		
	}
	
}
