package kr.ac.kopo.day02;

/*
 * 반복문을 위한 기본요소 4가지
 * 1. 반복할문장(statement)
 * 2. 시작값(init)
 * 3. 증가/감소(incre/decre)
 * 4. 종료조건
 * 
 * 1.init;
 * while(2.expr){
 * 		3.statement;
 * 		4.incre/decre;
 * 
 * }
 * 5.
 * 
 * 1 -> 2 조건 참 -> 3 ->4
 *   -> 2 조건 참 -> 3 ->4
 *   -> 2 조건 참 -> 3 ->4
 *   -> 2 조건 거짓 -> 5
 * 
 * 즉, while문은 while문의 2번 조건이 거짓일때까지 블록의 코드가 실행되는 것이다.
 * 
 * while문을 사용하는 경우는 내가 이 while문의 코드를 몇번돌릴지에 대한 횟수를 모르지만, 오직 어찌어찌해서 
 * 끝나는 조건만을 알때 while문을
 * 주로 사용하게된다.
 * 
 * while문이든 for문이든 동일하게 4가지 조건이 필요하다.
 * 
 * 즉,
 * 
 * for(1. init; 2. expr; 3.incre/decre){
 * 		4.statement;
 * }
 * 5.
 * 
 * for문이든 while문이든 조건식이 거짓이 될때까지 반복하는 것이다.
 * 
 * 따라서,
 * 
 * 1 -> 2 조건 참 -> 4 -> 3 (첫 시작의 경우 조건이 참이므로 무조건 참인경우 바로 3은 실행하지 않고 4로 넘어간다)
 *   -> 2 조건 참 -> 4 -> 3
 *   -> 2 조건 참 -> 4 -> 3
 *   -> 2 조건 거짓 -> 5
 * 
 */


public class LoopMain01 {
	
	public static void main(String[] args) {

		System.out.println("------- for 반복문 시작-------");
		
		for(int cnt = 1; cnt <= 5 ;cnt++) {
		// 증감 조건에서 cnt++ 뒤에 사실은 cnt++; 와 같이 세미콜론 ;가 생략되어 있는 것이다.
		// 그렇지만 for문의 증감조건은 이렇게 디테일하게 따지지 않아도 후지++ 나 전치++ 중 무엇을 써도 상관없다.
		// for 문의 시작 조건 변수 int cnt = 1 은 for문을 반복하는 동안에만 살아있는 for문안의 변수이다.
		// 자바에서의 변수는 블록안에서 라이프 사이클을 갖고 존재하므로, for문이 끝나서 for문의 블록이 빠져나오면
		// 이경우 int cnt = 1 변수는 존재하지 않기때문에 밑의 while문에서 cnt변수가 다시 정의되어도 최초로 정의되는 것처럼
		// 여겨지기 때문에 오류가 발생하지 않는다.
			
		// 그러나, 만약 이경우의 for문이 while 반복문의 뒤에 오게 된다면, 아래의 while 조건문위의 int cnt = 1
		// 변수가 main 메소드의 블록안에 속해 있으므로, 여전히 블록 사이클 안에서 살아있는 상태이므로, for문을 while문 
		// 뒤에 배치하여 실행하면 이미 int cnt 변수가 라이프 사이클 안에서 살아있는 상태로 정의된 상태이기 때문에
		// 변수의 중복선언이 발생하게 되어 오류가 발생하게된다.
			System.out.println("Hello");
			
		}
		
		// 이런 경우가 아니라 ++가 후치되어 cnt++; 이런 경우 움직임은 cnt변수값이 그대로 표현되고, ;를 만난뒤에
		// 블록의 끝 }을 만나기 전에 +1이 cnt에 추가된다음 블록의 끝을 만난다. 즉 결과적으로 이경우엔 cnt++은
		// ++cnt인 경우와 결과가 동일하다.
			
		
		System.out.println("-------for 반복문 종료-------");

		
		
		
	
		
		
		System.out.println("------- while 반복문 시작-------");
		
		int cnt = 1;
		
		while(cnt <= 5) {
		
			System.out.println("Hello");
			++cnt;
		// 이런 경우가 아니라 ++가 후치되어 cnt++; 이런 경우 움직임은 cnt변수값이 그대로 표현되고, ;를 만난뒤에
		// 블록의 끝 }을 만나기 전에 +1이 cnt에 추가된다음 블록의 끝을 만난다. 즉 결과적으로 이경우엔 cnt++은
		// ++cnt인 경우와 결과가 동일하다.
			
		}
		
		System.out.println("-------while 반복문 종료-------");
			
	}
	
}
